q
clear
@error_message
body
'Content-type'
content-type
body
n
e.message
@error
q
template
body
q
cookie
req.cookies['_rails_lite_app_flash']
q
c
q
@res
@already_built_response
name
c
q
n
@already_built_response
name
n
@res
content
n
name
n
@action_name
@controller_class
route_params
match_data
c
cc
c
q
c
q
c
res.set_cookie("_rails_lite_app", { path: '/', value: JSON.generate(@ds_cookie) } )
{ path: '/', value: JSON.generate(@ds_cookie) }
res
c
q
c
@req
c
req
c
req
c
req
q
req
s
@session
s
c
q
c
q
c
res
c
res
c
s
c
req
res
c
res
n
route
q
res
req
route_params
@action_name
q
@res
content
content_type
c
req.request_method
req.path
req
request
route
q
match_data
q
regex
regex = Regexp.new '/users/(?<id>\d+)'
regex
q
@pattern
regex
q
@pattern
regex
@pattern
q
regex
q
proc
&proc
c
route.pattern
req.fullpath
q
clear
q
req.request_method
route.http_method
q
req.request_method
req.request
req
q
action_name
controller_class
method
pattern
q
@action_name
q
ControllerBase.new(@req, @res)
Contloller.new(@req, @res)
Controller.new
@controller_class
Controller.new(@controller_class)
Controller.new(controller_class)
res.methods
res
q
req.fullpath =~ @pattern
req.fullpath =~ @pattern.to_s
@pattern
req.fullpath
req.fullpath =~ @pattern
req.request_method == @http_method.to_s.upcase
@http_method.to_s.upcase
@http_method.to_s.capitalize
req.request_method
@http_method
req.request_method == @http_method
req.fullpath
req.methods
req.method
req
req.request_path
req.request_method
q
@action_name
@controller_class
@http_method
@pattern
q
@ds_cookie
q
req
q
@ds_cookie
q
req
q
req.env["rack.request.cookie_hash"]["_rails_lite_app"]
req.env["rack.request.cookie_hash"]
req.env
req.env.rack.request.cookie_hash
req.env
@env
req.request_cookie_hash
req
q
render_content(bound, 'text/html')
c
q
n
quit
exit
continue
n
s
q
f.read
f
q
final_dir
q
final_dir
q
controller_name
q
snaked
q
controller_name
q
controller_name
q
self.class
q
x
q
@res
q
@res
content_type
