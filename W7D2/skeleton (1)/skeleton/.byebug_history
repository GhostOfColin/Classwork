c
bucket
c
lru.instance_variable_get(:@store).map { |l| l.key }
c
disp count
c
disp count
c
disp count
c
count
n
node
n
c
node
c
bucket
bucker
c
self.instance_variable_get('@map').first
self.instance_variable_get('@map')
self.instance_variable_get(:map)
self.map
self
node.key
node
nod
c
disp @store.map(&:key)
c
disp key
disp @store.last.key
disp count
@store.map(&:key)
c
key
c
@max
c
disp key
disp @store.map(&:key)
disp @store.last.key
disp count
c
disp count
disp @store.last.key
disp @store.map(&:key) 
disp key
c
@max
c
disp @store.last.key
c
disp @store.map(&:key)
disp count 
disp key
c
node
c
x
node.key
node
c
self[0]
self
bucket
c
self[bucket_idx]
c
disp @store.map(&:key)
disp count
c
cc
c
disp @store.map(&:key)
disp count
q
@store.last
key
q
c
disp @store.map(&:key)
c
q
node.next
node
c
disp node
q
count
@max
c
disp @store.map(&:key)
c
n
c
n
c
disp @store.map(&:key)
c
q
@store.map(&:key)
val
n
c
val
n
c
val
n
c
@store.map(&:key)
@store.map
@store
val
n
c
q
0 ** 0
key
c
@prc.call[key]
val
n
val
c
n
q
n
@map[key]
key
q
clear
y
@store.first
@stor.first
quit
@store.first.key
@store.first
@store
q
x_node
q
x_node
c
nodes
s
start.val
disp nodes
q
c
n
nodes
q
nodes
start.val
s
start.val
s
start.val
c
nodes
s
ss
start.val
s
start.val
s
start.val
s
disp nodes
start.val
start
q
@tail
tail
start
q
c
quit
node
s
disp count
q
num_buckets
num
n
@store
n
num_buckets
num
exit
c
num
@max
c
